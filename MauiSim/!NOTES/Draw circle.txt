From GoGoGadgetGravity








// drawFilledCircle draws a filled-in (rasterized) circle, centered on (cx, cy) and of the color provided by r,g,b,a,
// using a (heavy) modification to the Midpoint Circle algorithm.
// This method is adapted from https://stackoverflow.com/q/10878209/5061881.
func (q *Qt) drawFilledCircle(cx, cy, rad int, r, g, b, a uint8) {
	// If circle falls entirely outside the environment, return
	if (cx+rad < 0 || cx-rad > q.EnvironmentSize) && (cy+rad < 0 || cy-rad > q.EnvironmentSize) {
		return
	}

	err, x, y := -rad, rad, 0
	var lastY int

	for x >= y {
		lastY = y
		err += y
		y++
		err += y

		q.drawTwoCenteredLines(cx, cy, x, lastY, r, g, b, a)

		if err >= 0 {
			if x != lastY {maui-0
				q.drawTwoCenteredLines(cx, cy, lastY, x, r, g, b, a)
			}

			err -= x
			x--
			err -= x
		}
	}
}

// drawTwoCenteredLines draws two lines of length 2*dx+1, centered on (cx,cy) and of the color provided by r,g,b,a,
// and with a gap of 2*dx-1 rows/pixels between them (that is, the line at cy and dy-1 lines to either side of it are
// not drawn).
// This is used by drawFilledCircle. See attribution there.
func (q *Qt) drawTwoCenteredLines(cx, cy, dx, dy int, r, g, b, a uint8) {
	q.drawHLine(cx-dx, cy+dy, cx+dx, r, g, b, a)
	if dy != 0 {
		q.drawHLine(cx-dx, cy-dy, cx+dx, r, g, b, a)
	}
}

// drawHLine draws a horizontal line from (x0,y0) to (x1,y0), of the color provided by r,g,b,a.
func (q *Qt) drawHLine(x0, y0, x1 int, r, g, b, a uint8) {
	for x := x0; x <= x1; x++ {
		q.setPixel(x, y0, r, g, b, a)
	}
}

// drawVLine draws a vertical line from (x0,y0) to (x0,y1), of the color provided by r,g,b,a.
func (q *Qt) drawVLine(x0, y0, y1 int, r, g, b, a uint8) {
	for y := y0; y <= y1; y++ {
		q.setPixel(x0, y, r, g, b, a)
	}
}

// setPixel sets the color of a single pixel
func (q *Qt) setPixel(x, y int, r, g, b, a uint8) {
	if q.im2qim {
		// Setting the pixel color bytes in the back-buffer is >5x the speed of img.Set()
		s := q.tempImage.PixOffset(x, y)
		if s < 0 || s >= len(q.tempImage.Pix) {
			return
		}

		// Locks are only necessary if multithreading (and not then if very rare write failures are acceptable - it's just a slice)
		//q.imgLock.Lock()
		q.tempImage.Pix[s], q.tempImage.Pix[s+1], q.tempImage.Pix[s+2], q.tempImage.Pix[s+3] = r, g, b, a
		//q.imgLock.Unlock()
	} else {
		q.Canvas.SetPixelColor2(x, y, gui.NewQColor3(int(r), int(g), int(b), int(a)))
	}
}